//+gobra

package bytes

	
ghost
requires count >= 0
decreases count
pure func Repeat(b seq[byte], count int) (res seq[byte]) {
	return count == 0 ? seq[byte]{} : ( b ++ Repeat(b, count - 1) )
}

ghost
requires 0 < len(sep)
decreases
pure func Split(b, sep seq[byte]) (res seq[seq[byte]]) {
	return SplitInner(b, sep, seq[byte]{})
}

ghost
requires 0 < len(sep)
decreases len(s)
pure func SplitInner(s, sep, ac seq[byte]) (res seq[seq[byte]]) {
	return len(s) == 0 ?
		seq[seq[byte]]{ac} :
		s[:len(sep)] == sep ?
			seq[seq[byte]]{ac} ++ SplitInner(s[len(sep):], sep, seq[byte]{}) :
			SplitInner(s[1:], sep, ac ++ seq[byte]{s[0]})
}
